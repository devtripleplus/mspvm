<?php
$sArray = array();

$sGetUptime = fopen('/proc/uptime', 'r');
$sUptime = fgets($sGetUptime);
fclose($sGetUptime);
$sUptime = explode('.', $sUptime, 2);
$sArray['uptime'] = $sUptime[0];

$sGetMemory = fopen('/proc/meminfo', 'r');
$sMemory = 0;
while ($sLine = fgets($sGetMemory)) {
	$sPieces = array();
	if (preg_match('/^MemTotal:\s+(\d+)\skB$/', $sLine, $sPieces)) {
		$sArray['total_memory'] = $sPieces[1];
	}
	if (preg_match('/^MemFree:\s+(\d+)\skB$/', $sLine, $sPieces)) {
		$sFreeMemory = $sPieces[1];
	}
	if (preg_match('/^Cached:\s+(\d+)\skB$/', $sLine, $sPieces)) {
		$sCachedMemory = $sPieces[1];
		break;
	} 
} 
$sArray['free_memory'] = $sFreeMemory + $sCachedMemory;
fclose($sGetMemory);
 
$sArray['disk_total'] = disk_total_space("/");
$sArray['disk_free'] = disk_free_space("/");
 exec("df -T -x tmpfs -x devtmpfs -P -B 1M",$df);
    array_shift($df);
    $Stats = array();
    foreach($df as $disks){
        $split = preg_split('/\s+/', $disks);
        $Stats[] = array(
                    'disk'      => $split[0],
                    'mount'     => $split[6],
                    'type'      => $split[1],
                    'mb_total'  => $split[2],
                    'mb_used'   => $split[3],
                    'mb_free'   => $split[4],
                    'percent'   => $split[5],
                );
    }

$sArray['disks'] = $Stats;
$exec = <<<'EOF'
top -b -n1 -p 1 | fgrep "Cpu(s)" | tail -1 | awk -F'id,' -v prefix="$prefix" '{ split($1, vs, ","); v=vs[length(vs)]; sub("%", "", v); printf "%s%.1f%%\n", prefix, 100 - v }'
EOF;
//$exec = escapeshellarg($exec);
$sArray['cpu_util'] = shell_exec($exec);
$sLoad = sys_getloadavg();
$sArray['load_average'] = $sLoad[0];

$sArray['rx_bandwidth'] = exec("cat /sys/class/net/eth0/statistics/rx_bytes");
$sArray['tx_bandwidth'] = exec("cat /sys/class/net/eth0/statistics/tx_bytes");

echo json_encode($sArray);
